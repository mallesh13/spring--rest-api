package com.capgemini.personsql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.containsString;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.capgemini.personsql.controller.PersonController;
import com.capgemini.personsql.entity.Person;
import com.capgemini.personsql.service.PersonService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class PersonSqlApplicationTests {

	@Autowired
	private PersonController controller;

	@MockBean
	private PersonService service;

	@Test
	public void contextLoads() {
		assertThat(controller).isNotNull();
	}

	@Autowired
	private MockMvc mvc;

	@Test
	public void testGetAll() throws Exception {
		Person person1 = new Person(101, "hello");
		Person person2 = new Person(102, "hii");
		List<Person> persons = new ArrayList<Person>();
		persons.add(person1);
		persons.add(person2);
		
		Mockito.when(service.findAll()).thenReturn(persons);

		// assertEquals(persons,controller.all());

		String URI = "/all";
		RequestBuilder builder = MockMvcRequestBuilders.get(URI).accept(MediaType.APPLICATION_JSON);
		MvcResult result = mvc.perform(builder).andReturn();
		String expected = this.mapJson(result);
		String actual = result.getResponse().getContentAsString();
		assertThat(actual).isEqualTo(expected);

	}
	@Test
	public void testAdd() throws JsonProcessingException {
	
		/*
		 * this.mvc.perform(post("/add")).andDo(print()).andExpect(status().isOk())
		 * .andExpect(content().string(containsString("/added")));
		 */
		
		Person person=new Person(101, "jhon");
		String json=this.mapJson(person);
		String uri="/add";
		
		RequestBuilder builder= MockMvcRequestBuilders.post(uri).accept(MediaType.APPLICATION_JSON).content(service.addPerson(person);)
	}

	private String mapJson(Object object) throws JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.writeValueAsString(object);
	}
	
	
	

}
