package com.capgemini.personsql;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.capgemini.personsql.controller.PersonController;
import com.capgemini.personsql.entity.Person;
import com.capgemini.personsql.service.PersonService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class PersonSqlApplicationTests {

	@Autowired
	private PersonController controller;

	@MockBean
	private PersonService service;

	@Test
	public void contextLoads() {
		assertThat(controller).isNotNull();
	}

	@Autowired
	private MockMvc mvc;

	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
		this.mvc = MockMvcBuilders.standaloneSetup(controller).build();
	}

	private String mapJson(Object object) throws JsonProcessingException {
		ObjectMapper mapper = new ObjectMapper();
		return mapper.writeValueAsString(object);
	}

	@Test
	public void testAdd() throws Exception {
		Person person = new Person(101, "jhony");
		String json = this.mapJson(person);
		String uri = "/person/add";
		Mockito.when(service.addPerson(Mockito.any(Person.class))).thenReturn(person);
		RequestBuilder builder = MockMvcRequestBuilders.post(uri).accept(MediaType.APPLICATION_JSON).content(json)
				.contentType(MediaType.APPLICATION_JSON);
		MvcResult result = mvc.perform(builder).andReturn();
		String output = result.getResponse().getContentAsString();
		assertThat(output).isEqualTo(json);
		assertEquals(HttpStatus.OK.value(), result.getResponse().getStatus());

	}

	@Test
	public void testGetAll() throws Exception {
		Person person1 = new Person(101, "hello");
		Person person2 = new Person(102, "hii");
		List<Person> persons = new ArrayList<Person>();
		persons.add(person1);
		persons.add(person2);

		Mockito.when(service.findAll()).thenReturn(persons);

		String URI = "/person/all";
		RequestBuilder builder = MockMvcRequestBuilders.get(URI).accept(MediaType.APPLICATION_JSON).content(expected)
		.contentType(MediaType.APPLICATION_JSON);
		MvcResult result = mvc.perform(builder).andReturn();
		String expected = this.mapJson(result);
		String actual = result.getResponse().getContentAsString();
		assertThat(actual).isEqualTo(expected);

	}

	/*
	 * private String mapJson(Object object) throws JsonProcessingException {
	 * ObjectMapper mapper = new ObjectMapper(); return
	 * mapper.writeValueAsString(object); }
	 */
}
